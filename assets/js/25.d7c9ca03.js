(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{185:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),a("p",[t._v("从概念的字面意义上说，**“变量提升”**意味着变量和函数的声明会在物理层面移动到代码的最前面，但这么说并不准确。实际上变量和函数声明在代码里的位置是不会动的，而是在编译阶段被放入内存中。")]),t._v(" "),a("h2",{attrs:{id:"变量的变量提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的变量提升"}},[t._v("#")]),t._v(" 变量的变量提升")]),t._v(" "),a("h3",{attrs:{id:"var声明的变量提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var声明的变量提升"}},[t._v("#")]),t._v(" var声明的变量提升")]),t._v(" "),a("p",[t._v("先看个例子")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出: undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建 + 初始化 + 赋值")]),t._v("\n")])])]),a("p",[t._v("首先我们知道"),a("code",[t._v("var")]),t._v(" 声明存在「"),a("strong",[t._v("创建、初始化和赋值")]),t._v("」三个过程")]),t._v(" "),a("ul",[a("li",[t._v("创建: 在环境中创建了变量"),a("code",[t._v("a")])]),t._v(" "),a("li",[t._v("初始化: 将变量a的值初始化为"),a("code",[t._v("undefined")])]),t._v(" "),a("li",[t._v("赋值: 将变量"),a("code",[t._v("a")]),t._v("的值赋值为 "),a("code",[t._v("1")])])]),t._v(" "),a("p",[t._v("上述例子输出为"),a("code",[t._v("undefined")]),t._v(",也就是说"),a("code",[t._v("var")]),t._v("声明的变量「"),a("strong",[t._v("创建、初始化")]),t._v("」的过程被"),a("strong",[t._v("提升")]),t._v("了,而赋值过程未被提升.")]),t._v(" "),a("h3",{attrs:{id:"let声明的变量提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let声明的变量提升"}},[t._v("#")]),t._v(" "),a("code",[t._v("let")]),t._v("声明的变量提升")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//报错: Cannot access 'a' before initialization")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建 + 初始化 ")]),t._v("\n")])])]),a("p",[t._v("在上述例子中报错,不能在 a 初始化之前访问 a,那么说明用 "),a("code",[t._v("let")]),t._v("声明的变量「"),a("strong",[t._v("初始化")]),t._v("」过程未被提升,同时「"),a("strong",[t._v("赋值")]),t._v("」过程也便不存在了,那么我们又如何知道「"),a("strong",[t._v("创建")]),t._v("」过程有没有被提升")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错: Cannot access 'a' before initialization")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出: 1")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出: 2")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("   \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上述例子中:")]),t._v(" "),a("ul",[a("li",[t._v("变量"),a("code",[t._v("b")]),t._v("在全局作用域中声明赋值,输出 1")]),t._v(" "),a("li",[t._v("变量"),a("code",[t._v("c")]),t._v("在块级作用域中被重新声明赋值, 输出 2")]),t._v(" "),a("li",[t._v("变量"),a("code",[t._v("a")]),t._v("在全局作用域中声明赋值,在块级作用域中也重新声明赋值了,此时如果块级作用域中变量 "),a("code",[t._v("a")]),t._v(" 的「"),a("strong",[t._v("创建")]),t._v("」未被提升,那么变量"),a("code",[t._v("a")]),t._v("应当输出的是全局作用域赋值的值 1.")]),t._v(" "),a("li",[a("strong",[t._v("值得注意的一点")]),t._v(":执行"),a("code",[t._v("let a = 1")]),t._v("是将 变量"),a("code",[t._v("a")]),t._v("初始化为 1,与 "),a("code",[t._v("var")]),t._v(" 的初始化是不同的,而"),a("code",[t._v("let a")]),t._v("才是将变量"),a("code",[t._v("a")]),t._v("初始化为"),a("code",[t._v("undefined")])]),t._v(" "),a("li",[a("strong",[t._v("const")]),t._v(": "),a("code",[t._v("const")]),t._v(" 和 "),a("code",[t._v("let")]),t._v(" 只有一个区别，那就是 const 只有「"),a("strong",[t._v("创建")]),t._v("」和「"),a("strong",[t._v("初始化")]),t._v("」，没有「"),a("strong",[t._v("赋值")]),t._v("」过程。")])]),t._v(" "),a("h2",{attrs:{id:"函数的变量提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的变量提升"}},[t._v("#")]),t._v(" 函数的变量提升")]),t._v(" "),a("p",[t._v("首先我们知道函数的声明有俩种方式:")]),t._v(" "),a("ol",[a("li",[t._v("函数声明式")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  输出:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  ƒ fn () {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//      console.log(1)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  }")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("函数字面量式")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  输出:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  若用 let 来声明函数, 会报错. 和上述变量提升相同.")]),t._v("\n")])])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("var")]),t._v(" 的「"),a("strong",[t._v("创建")]),t._v("」和「"),a("strong",[t._v("初始化")]),t._v("」都被提升了。")]),t._v(" "),a("li",[a("code",[t._v("let")]),t._v(" 的「"),a("strong",[t._v("创建")]),t._v("」过程被提升了，但是初始化没有提升。")]),t._v(" "),a("li",[a("code",[t._v("function")]),t._v(" 的「"),a("strong",[t._v("创建")]),t._v("」「"),a("strong",[t._v("初始化")]),t._v("」和「"),a("strong",[t._v("赋值")]),t._v("」都被提升了。")]),t._v(" "),a("li",[t._v("同一个变量只会声明一次，其他的会被忽略掉或者覆盖掉。")]),t._v(" "),a("li",[t._v("函数声明的优先级高于变量声明的优先级，并且函数声明和函数定义的部分一起被提升。")])]),t._v(" "),a("h2",{attrs:{id:"题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),a("ul",[a("li",[t._v("下列代码输出的是什么,为什么?")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined  undefined 2 1")]),t._v("\n")])])]),a("ul",[a("li",[t._v("如何理解 "),a("code",[t._v("let x = x")]),t._v(" 报错之后，再次 "),a("code",[t._v("let x")]),t._v("依然会报错？")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错:Cannot access 'x' before initialization")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错:Identifier 'x' has already been declared")]),t._v("\n")])])]),a("p",[t._v("1.因为"),a("code",[t._v("let x = x")]),t._v("是将变量"),a("code",[t._v("x")]),t._v("初始化为"),a("code",[t._v("x")]),t._v(",而 "),a("code",[t._v("x")]),t._v("还未被初始化,所以初始化失败.\n2."),a("code",[t._v("x")]),t._v("无法再被初始化, 是因为 "),a("code",[t._v("x")]),t._v(" 已经在环境中被创建.\n3.即"),a("code",[t._v("x")]),t._v('像是处在创建完成到初始化过程中间,一种类似锁定的状态,官方成为"'),a("strong",[t._v("暂时死区")]),t._v('".')])])}),[],!1,null,null,null);s.default=e.exports}}]);