(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{195:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[t._v("#")]),t._v(" JavaScript")]),t._v(" "),a("h3",{attrs:{id:"javascript-有哪几种数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-有哪几种数据类型"}},[t._v("#")]),t._v(" javascript 有哪几种数据类型")]),t._v(" "),a("ul",[a("li",[t._v("基本类型: "),a("code",[t._v("null")]),t._v("，"),a("code",[t._v("undefined")]),t._v("，"),a("code",[t._v("boolean")]),t._v("，"),a("code",[t._v("number")]),t._v("，"),a("code",[t._v("string")]),t._v("，"),a("code",[t._v("symbol")]),t._v(" "),a("ul",[a("li",[t._v("每个从"),a("code",[t._v("Symbol()")]),t._v("返回的"),a("code",[t._v("symbol")]),t._v("值都是唯一的。一个"),a("code",[t._v("symbol")]),t._v("值能作为对象属性的标识符；这是该数据类型仅有的目的")]),t._v(" "),a("li",[a("code",[t._v("Symbol")]),t._v("作用\n"),a("ul",[a("li",[a("code",[t._v("Symbol")]),t._v(" 作为属性名")]),t._v(" "),a("li",[a("code",[t._v("Symbol")]),t._v(" 对象元素的保护作用")])])])])]),t._v(" "),a("li",[t._v("对象:"),a("code",[t._v("object")])])]),t._v(" "),a("p",[t._v("PS:其中数字类型是浮点类型的，没有整型。并且浮点类型基于 IEEE 754标准实现，在使用中会遇到某些 Bug。"),a("code",[t._v("NaN")]),t._v(" 也属于 "),a("code",[t._v("number")]),t._v(" 类型，并且 "),a("code",[t._v("NaN")]),t._v(" 不等于自身。")]),t._v(" "),a("h3",{attrs:{id:"cookies-sessionstorage和localstorage区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookies-sessionstorage和localstorage区别"}},[t._v("#")]),t._v(" cookies sessionStorage和localstorage区别")]),t._v(" "),a("p",[t._v("相同点：都存储在客户端\n不同点：\n1.存储大小")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("cookie")]),t._v("数据大小不能超过4k。")]),t._v(" "),a("li",[a("code",[t._v("sessionStorage")]),t._v("和"),a("code",[t._v("localStorage")]),t._v(" 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("有效时间")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("localStorage")]),t._v(" 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；")]),t._v(" "),a("li",[a("code",[t._v("sessionStorage")]),t._v(" 数据在当前浏览器窗口关闭后自动删除。")]),t._v(" "),a("li",[a("code",[t._v("cookie")]),t._v(" 设置的"),a("code",[t._v("cookie")]),t._v("过期时间之前一直有效，即使窗口或浏览器关闭")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("数据与服务器之间的交互方式")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("cookie")]),t._v("的数据会自动的传递到服务器，服务器端也可以写"),a("code",[t._v("cookie")]),t._v("到客户端")]),t._v(" "),a("li",[a("code",[t._v("sessionStorage")]),t._v("和localStorage`不会自动把数据发给服务器，仅在本地保存。")])]),t._v(" "),a("h3",{attrs:{id:"什么是事件冒泡-捕获？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件冒泡-捕获？"}},[t._v("#")]),t._v(" 什么是事件冒泡/捕获？")]),t._v(" "),a("ul",[a("li",[t._v("事件冒泡：子元素事件的触发会影响父元素事件； 开关事件冒泡：\n"),a("ol",[a("li",[t._v("开启事件冒泡："),a("code",[t._v("element.addEventListener(eventName，handler，false)")])]),t._v(" "),a("li",[t._v("关闭事件冒泡：假设传统方式事件的返回值为 e，就可以通过 "),a("code",[t._v("e.stopPropagation()")]),t._v("来关闭事件冒泡；")]),t._v(" "),a("li",[t._v("事件捕获：父元素的事件会影响子元素的事件； 开启事件捕获："),a("code",[t._v("element.addEventListener(eventName，handler，true)")])])])])]),t._v(" "),a("h3",{attrs:{id:"什么是事件委托机制？这样做有什么好处？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件委托机制？这样做有什么好处？"}},[t._v("#")]),t._v(" 什么是事件委托机制？这样做有什么好处？")]),t._v(" "),a("p",[t._v("事件委托，就是某个事件本来该自己干的，但是自己不干，交给别人来干。就叫事件委托。打个比方：一个 button 对象，本来自己需要监控自身的点击事件，但是自己不来监控这个点击事件，让自己的父节点来监控自己 的点击事件。")]),t._v(" "),a("p",[t._v("好处：")]),t._v(" "),a("ol",[a("li",[t._v("提高性能：列如，当有很多 li 同时需要注册事件的时候，如果使用传统方法来注册事件的话，需要给每 一个 li 注册事件。然而如果使用委托事件的话，就只需要将事件委托给该一个元素即可。这样就能提高性能。")]),t._v(" "),a("li",[t._v("新添加的元素还会有之前的事件；")])]),t._v(" "),a("h3",{attrs:{id:"_1、ajax-请求数据步骤是什么？传输的数据是用的暗文还是明文？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、ajax-请求数据步骤是什么？传输的数据是用的暗文还是明文？"}},[t._v("#")]),t._v(" 1、AJAX 请求数据步骤是什么？传输的数据是用的暗文还是明文？")]),t._v(" "),a("div",{staticClass:"language-JavaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr； xhr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("； \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建一个异步对象 ")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Get"')]),t._v("， "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.ashx"')]),t._v("， "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Get 方式括号中的三个参数分别为：1.发送请求的方式 2. 样请求的页面 3.是否异步 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//xhr.open("post"，"test.ashx"，true)；')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//xhr.setRequestHeader("Content-Type"， "application/x-www-form-urlencoded")； Post 方式发送数据')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这个回调函数主要用来检测服务器是否把数据返回给异步对象 ")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setRequestHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"If-Modified-Since"')]),t._v("，"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置浏览器不使用缓存 ")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readystate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//readyState 属 性 指 出 了 XMLHttpRequest 对 象 在 发 送 / 接 收 数 据 过 程 中 所 处 的 几 个 状 态 。 XMLHttpRequest 对象会经历 5 种不同的状态。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0：未初始化。对象已经创建，但还未初始化，即还没调用 open 方法； ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1：已打开。对象已经创建并初始化，但还未调用 send 方法； ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2：已发送。已经调用 send 方法，但该对象正在等待状态码和头的返回； ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3：正在接收。已经接收了部分数据，但还不能使用该对象的属性和方法，因为状态和响应头不完整； ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4：已加载。所有数据接收完毕")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//检测服务器返回的响应报文的状态码是否为 200 alert(xhr.responseText)；")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//服务器返回的 Response 数据 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//解析服务器返回的 jason 格式的数据 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseText； \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" json"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"("')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('")"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("； \n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jason"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("； "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("；\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("； \nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//异步对象发送请求 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//xhr.send("txtName=roger&txtPwd=123")； 以 post 方式发送数据')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ajax 中 get 和 post 方式请求数据都是明文的。")]),t._v("\n")])])]),a("h3",{attrs:{id:"作用域和闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域和闭包"}},[t._v("#")]),t._v(" 作用域和闭包")]),t._v(" "),a("p",[t._v("答：简单的说，作用域是针对变量的，比如我们创建一个函数 a1，函数里面又包了一个子函数 a2。此时就存 在三个作用域： 全局作用域－a1 作用域－a2 作用域；即全局作用域包含了 a1 的作用域，a2 的作用域包含了 a1 的作用域。 当 a1 在查找变量的时候会先从自身的作用域区查找，找不到再到上一级 a2 的作用域查找，如果还没找到就 到全局作用域区查找，这样就形成了一个作用域链。 理解闭包首先要理解，js 垃圾回收机制，也就是当一个函数被执行完后，其作用域会被收回，如果形成了闭包，执行完后其作用域就不会被收回。")]),t._v(" "),a("div",{staticClass:"language-JavaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("a1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("a2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如果某个函数被他的父函数之外的一个变量引用，就会形成闭包。")]),t._v(" "),a("p",[t._v("闭包的作用，就是保存自己私有的变量，通过提供的接口（方法）给外部使用，但外部不能直接访问该变量。")])])}),[],!1,null,null,null);s.default=e.exports}}]);